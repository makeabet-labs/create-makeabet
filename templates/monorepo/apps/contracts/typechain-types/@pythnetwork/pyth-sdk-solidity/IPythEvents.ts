/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IPythEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "PriceFeedUpdate" | "TwapPriceFeedUpdate"
  ): EventFragment;
}

export namespace PriceFeedUpdateEvent {
  export type InputTuple = [
    id: BytesLike,
    publishTime: BigNumberish,
    price: BigNumberish,
    conf: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    publishTime: bigint,
    price: bigint,
    conf: bigint
  ];
  export interface OutputObject {
    id: string;
    publishTime: bigint;
    price: bigint;
    conf: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TwapPriceFeedUpdateEvent {
  export type InputTuple = [
    id: BytesLike,
    startTime: BigNumberish,
    endTime: BigNumberish,
    twapPrice: BigNumberish,
    twapConf: BigNumberish,
    downSlotsRatio: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    startTime: bigint,
    endTime: bigint,
    twapPrice: bigint,
    twapConf: bigint,
    downSlotsRatio: bigint
  ];
  export interface OutputObject {
    id: string;
    startTime: bigint;
    endTime: bigint;
    twapPrice: bigint;
    twapConf: bigint;
    downSlotsRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPythEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IPythEvents;
  waitForDeployment(): Promise<this>;

  interface: IPythEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "PriceFeedUpdate"
  ): TypedContractEvent<
    PriceFeedUpdateEvent.InputTuple,
    PriceFeedUpdateEvent.OutputTuple,
    PriceFeedUpdateEvent.OutputObject
  >;
  getEvent(
    key: "TwapPriceFeedUpdate"
  ): TypedContractEvent<
    TwapPriceFeedUpdateEvent.InputTuple,
    TwapPriceFeedUpdateEvent.OutputTuple,
    TwapPriceFeedUpdateEvent.OutputObject
  >;

  filters: {
    "PriceFeedUpdate(bytes32,uint64,int64,uint64)": TypedContractEvent<
      PriceFeedUpdateEvent.InputTuple,
      PriceFeedUpdateEvent.OutputTuple,
      PriceFeedUpdateEvent.OutputObject
    >;
    PriceFeedUpdate: TypedContractEvent<
      PriceFeedUpdateEvent.InputTuple,
      PriceFeedUpdateEvent.OutputTuple,
      PriceFeedUpdateEvent.OutputObject
    >;

    "TwapPriceFeedUpdate(bytes32,uint64,uint64,int64,uint64,uint32)": TypedContractEvent<
      TwapPriceFeedUpdateEvent.InputTuple,
      TwapPriceFeedUpdateEvent.OutputTuple,
      TwapPriceFeedUpdateEvent.OutputObject
    >;
    TwapPriceFeedUpdate: TypedContractEvent<
      TwapPriceFeedUpdateEvent.InputTuple,
      TwapPriceFeedUpdateEvent.OutputTuple,
      TwapPriceFeedUpdateEvent.OutputObject
    >;
  };
}
