/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MakeABetMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "createRoom"
      | "nextRoomId"
      | "pyth"
      | "rooms"
      | "settleRoom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RoomCreated" | "RoomSettled"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createRoom",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRoomId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pyth", values?: undefined): string;
  encodeFunctionData(functionFragment: "rooms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "settleRoom",
    values: [BigNumberish, BytesLike[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createRoom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextRoomId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pyth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rooms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleRoom", data: BytesLike): Result;
}

export namespace RoomCreatedEvent {
  export type InputTuple = [
    roomId: BigNumberish,
    question: string,
    feedId: BytesLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    roomId: bigint,
    question: string,
    feedId: string,
    expiry: bigint
  ];
  export interface OutputObject {
    roomId: bigint;
    question: string;
    feedId: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoomSettledEvent {
  export type InputTuple = [roomId: BigNumberish, outcome: boolean];
  export type OutputTuple = [roomId: bigint, outcome: boolean];
  export interface OutputObject {
    roomId: bigint;
    outcome: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MakeABetMarket extends BaseContract {
  connect(runner?: ContractRunner | null): MakeABetMarket;
  waitForDeployment(): Promise<this>;

  interface: MakeABetMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  createRoom: TypedContractMethod<
    [question: string, priceFeedId: BytesLike, expiry: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  nextRoomId: TypedContractMethod<[], [bigint], "view">;

  pyth: TypedContractMethod<[], [string], "view">;

  rooms: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, boolean] & {
        question: string;
        priceFeedId: string;
        expiry: bigint;
        settled: boolean;
        outcome: boolean;
      }
    ],
    "view"
  >;

  settleRoom: TypedContractMethod<
    [
      roomId: BigNumberish,
      priceUpdateData: BytesLike[],
      targetPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createRoom"
  ): TypedContractMethod<
    [question: string, priceFeedId: BytesLike, expiry: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextRoomId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pyth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rooms"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, boolean] & {
        question: string;
        priceFeedId: string;
        expiry: bigint;
        settled: boolean;
        outcome: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "settleRoom"
  ): TypedContractMethod<
    [
      roomId: BigNumberish,
      priceUpdateData: BytesLike[],
      targetPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RoomCreated"
  ): TypedContractEvent<
    RoomCreatedEvent.InputTuple,
    RoomCreatedEvent.OutputTuple,
    RoomCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RoomSettled"
  ): TypedContractEvent<
    RoomSettledEvent.InputTuple,
    RoomSettledEvent.OutputTuple,
    RoomSettledEvent.OutputObject
  >;

  filters: {
    "RoomCreated(uint256,string,bytes32,uint64)": TypedContractEvent<
      RoomCreatedEvent.InputTuple,
      RoomCreatedEvent.OutputTuple,
      RoomCreatedEvent.OutputObject
    >;
    RoomCreated: TypedContractEvent<
      RoomCreatedEvent.InputTuple,
      RoomCreatedEvent.OutputTuple,
      RoomCreatedEvent.OutputObject
    >;

    "RoomSettled(uint256,bool)": TypedContractEvent<
      RoomSettledEvent.InputTuple,
      RoomSettledEvent.OutputTuple,
      RoomSettledEvent.OutputObject
    >;
    RoomSettled: TypedContractEvent<
      RoomSettledEvent.InputTuple,
      RoomSettledEvent.OutputTuple,
      RoomSettledEvent.OutputObject
    >;
  };
}
